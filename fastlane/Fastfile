# frozen_string_literal: true

require 'yaml'
require 'spaceship'
require 'fileutils'
require 'json'
require 'dotenv'

Dotenv.load('../.env.releases')

skip_docs

# Constants and Path Configurations
$APP_JSON_PATH = '../app.json'
$APP_JSON = JSON.parse(File.read($APP_JSON_PATH))
APP_PLIST = '../ios/Energy/Info.plist'
BUILD_GRADLE = '../android/app/build.gradle'

IOS_TARGETS = {
  'sy.art.folio' => { :name => 'Energy', :plist_path => APP_PLIST },
}

BETA_LANES = [:ship_beta_ios, :ship_beta_android].freeze

GIT_COMMIT_SHORT_HASH = `git log -n1 --format='%h'`.chomp
GIT_COMMIT_HASH = `git log -n1 --format='%H'`.chomp
GIT_COMMIT_DATE_STR = DateTime.parse(`git log -n1 --format='%ci'`.chomp).iso8601
GIT_REMOTE_ORIGIN_URL = `git config --get remote.origin.url`.chomp

import 'utility_fastlane.rb'
import 'sentry_fastlane.rb'

# Circle CI Setup

before_all do
  setup_circle_ci
end

# iOS Lanes

desc "Ships iOS beta to TestFlight"
lane :ship_beta_ios do |options|
  api_key = generate_app_store_connect_api_key

  bundle_version = set_build_version_ios
  set_git_properties_ios

  latest_version = $APP_JSON['version']

  beta_readme = "Thanks for using the Folio beta!"

  # Builds the app
  ios_target_ids = IOS_TARGETS.keys
  sync_code_signing(app_identifier: ios_target_ids, type: 'appstore')

  IOS_TARGETS.each do |id, meta|
    disable_automatic_code_signing(
      path: 'ios/Energy.xcodeproj',
      team_id: '23KMWZ572J',
      targets: [meta[:name]],
      profile_name: "match AppStore #{id}"
    )
  end

  tag_and_push(tag: "ios-#{latest_version}-#{bundle_version}")

  # important! this must match the release version specified
  # in Eigen in order for sourcemaps to work correctly
  sentry_release_name = "ios-#{latest_version}-#{bundle_version}"

  sh("yarn bundle:ios")
  build_ios_app(
    workspace: "ios/Energy.xcworkspace",
    scheme: "Energy",
    configuration: 'Store',
    silent: true
  )

  upload_sentry_artifacts(
    sentry_release_name: sentry_release_name,
    dist_version: bundle_version,
    platform: "ios"
  )

  # Send to the app store
  beta_app_review_info = {
    contact_email: ENV['BETA_CONTACT_EMAIL'],
    contact_first_name: ENV['BETA_CONTACT_FIRST_NAME'],
    contact_last_name: ENV['BETA_CONTACT_LAST_NAME'],
    contact_phone: ENV['BETA_CONTACT_PHONE'],
    demo_account_name: ENV['BETA_DEMO_ACCOUNT_NAME'],
    demo_account_password: ENV['BETA_DEMO_ACCOUNT_PWD']
  }

  # TODO: distribute external should be true
  pilot(
    api_key: api_key,
    beta_app_review_info: beta_app_review_info,
    changelog: beta_readme,
    itc_provider: 'ArtsyInc',
    distribute_external: false,
    groups: ['Artsy People']
  )
end

desc "Promote a testflight iOS beta to the app store"
lane :promote_beta_ios do
  api_key = generate_app_store_connect_api_key

  # There seems to be some delta between spaceship + deliver token format
  token = generate_spaceship_token
  Spaceship::ConnectAPI.token = token

  app = Spaceship::ConnectAPI::App.find('sy.art.folio')
  next_app_store_version = app.get_edit_app_store_version.version_string

  # app.builds are listed most recent first, limit to 20
  builds = app.get_builds.first(20).map { |build| build.version }

  UI.header "Last 20 iOS builds"

  build_number = UI.select("Which build would you like to release?: ", builds)

  if UI.confirm("Are you sure you would like to release '#{build_number}'?")
    UI.success "Continuing the release!"
  else
    UI.user_error!("Stopping the train!")
  end

  UI.success("Let's deliver beta #{next_app_store_version} (#{build_number}) with build number #{build_number}.")

  deliver(
    api_key: api_key,
    app_version: $APP_JSON['version'],
    build_number: build_number,
    submit_for_review: true,
    automatic_release: true,
    phased_release: true,
  )

  UI.message('Tagging submission and pushing to GitHub.')

  formatted_build_number = format_build_number(build_number)

  tag_and_push(tag: "ios-#{next_app_store_version}-#{formatted_build_number}-submission")

  sentry_slack_ios(build_number: formatted_build_number, version: next_app_store_version)

  UI.success('All done!')
end


desc "Set the build version in the iOS app plist"
lane :set_build_version_ios do
  bundle_version = DateTime.now.strftime("%Y.%m.%d.%H")
  IOS_TARGETS.each do |id, meta|
    absolute_path = File.expand_path(meta[:plist_path])
    set_info_plist_value(path: absolute_path, key: 'CFBundleShortVersionString', value: $APP_JSON['version'])
    set_info_plist_value(path: absolute_path, key: 'CFBundleVersion', value: bundle_version)
  end
  bundle_version
end

desc "Set some git properties in iOS for reading in builds"
lane :set_git_properties_ios do
  absolute_path = File.expand_path(APP_PLIST)
  set_info_plist_value(path: absolute_path, key: 'GITCommitShortHash', value: GIT_COMMIT_SHORT_HASH)
  set_info_plist_value(path: absolute_path, key: 'GITCommitHash', value: GIT_COMMIT_HASH)
  set_info_plist_value(path: absolute_path, key: 'GITCommitDate', value: GIT_COMMIT_DATE_STR)
  set_info_plist_value(path: absolute_path, key: 'GITRemoteOriginURL', value: GIT_REMOTE_ORIGIN_URL)
end

desc "Create a new version in app store connect"
lane :create_next_app_version do |options|
  api_key = generate_app_store_connect_api_key

  next_version = options[:next_version_code]

  puts "Let's create a new app version #{next_version}."
  deliver(
    api_key: api_key,
    app_version: next_version,
    skip_metadata: true,
    automatic_release: false,
    phased_release: false,
    submit_for_review: false,
  )
end

# Android Lanes

desc "Ship android beta to play store or firebase"
lane :ship_beta_android do |options|
  deployment_target = options[:deployment_target] || 'play_store' # default to 'play_store'
  
  sh("yarn jetifier")
  sh("yarn relay")

  is_android_beta = deployment_target == 'firebase'
  flag_android_beta(is_android_beta: is_android_beta)

  vname, vcode = set_build_version_android
  # TODO: make sure this lane exists
  set_git_properties_android
  tag_and_push(tag: "android-#{vname}-#{vcode}")

  sentry_release_name = "android-#{vname}-#{vcode}"

  sh("mkdir -p android/app/src/main/assets && touch android/app/src/main/assets/index.android.bundle && yarn bundle:android")
  gradle(
    task: "bundle",
    build_type: "Release",
    project_dir: "android/",
    flags: "--no-daemon -x bundleReleaseJsAndAssets",
  )

  upload_sentry_artifacts(
    sentry_release_name: sentry_release_name,
    dist_version: "#{vcode}",
    platform: "android"
  )

  deploy_android_beta(deployment_target: deployment_target)
end

def deploy_android_beta(deployment_target:)
  if deployment_target == 'play_store'
    supply(
      track: "alpha",
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  elsif deployment_target == 'firebase'
    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      groups: 'artsy-people',
      android_artifact_path: "./android/app/build/outputs/bundle/release/app-release.aab"
    )
  else
    UI.error("Unknown deployment target: #{deployment_target}")
  end
end

desc "Promote a play store android beta to production"
lane :promote_beta_android do
  # android versions are listed most recent first, limit to 20
  version_codes = google_play_track_version_codes(
    track: "alpha",
  ).first(20)

  UI.header "Last 20 Android builds"

  selected_version_code = UI.select("Which build would you like to release?: ", version_codes)

  if UI.confirm("Are you sure you would like to release '#{selected_version_code}'?")
    UI.success "Continuing the release!"
  else
    UI.user_error!("Stopping the train!")
  end

  supply(
    track: 'alpha',
    version_code: selected_version_code,
    track_promote_to: 'production',
    rollout: '0.1',
    skip_upload_metadata: true,
    skip_upload_changelogs: true,
    skip_upload_images: true,
    skip_upload_screenshots: true,
  )

  version, build_number = set_build_version_android(version_code: selected_version_code)
  tag_and_push(tag: "android-#{version}-#{selected_version_code}-submission")

  sentry_slack_android(build_number: build_number, version: version)

  UI.success('All done!')
end

desc "Set the build version in the android app build.gradle"
lane :set_build_version_android do |options|
  version_code = options[:version_code]

  next_version_name = $APP_JSON['version']

  if version_code.nil?
    current_version_code = google_play_track_version_codes(
      track: "alpha",
    ).first
    version_code = current_version_code + 1
  end

  next_version_code = version_code

  contents = File.read(BUILD_GRADLE)

  contents = contents.gsub(/(versionName) .*/, "\\1 \"#{next_version_name}\"")
  contents = contents.gsub(/(versionCode) (.*)/, "\\1 #{next_version_code}")

  write_contents_to_file(BUILD_GRADLE, contents)

  [next_version_name, next_version_code]
end

desc "Set some git properties on android for reading in builds"
lane :set_git_properties_android do
  contents = File.read(BUILD_GRADLE)

  contents = contents.gsub(/(GITCommitShortHash.* '").*("')/, "\\1#{GIT_COMMIT_SHORT_HASH}\\2")
  contents = contents.gsub(/(GITCommitHash.* '").*("')/, "\\1#{GIT_COMMIT_HASH}\\2")
  contents = contents.gsub(/(GITCommitDate.* '").*("')/, "\\1#{GIT_COMMIT_DATE_STR}\\2")
  contents = contents.gsub(/(GITRemoteOriginURL.* '").*("')/, "\\1#{GIT_REMOTE_ORIGIN_URL}\\2")

  write_contents_to_file(BUILD_GRADLE, contents)
end

desc "Set the android beta flag so we can differentiate betas in code"
lane :flag_android_beta do |options|
  is_android_beta = options[:is_android_beta]
  $APP_JSON['isAndroidBeta'] = is_android_beta
  write_contents_to_file($APP_JSON_PATH, JSON.pretty_generate($APP_JSON))
end


# Codepush

lane :deploy_to_codepush do |options|
  platform = options[:platform]
  deployment_name = options[:deployment_name]
  description = options[:description]

  # important! this must match the release version specified
  # in Eigen in order for sourcemaps to work correctly
  release_name, dist_version, release_version = set_codepush_release_values(deployment_name, platform)

  app_name = platform == "ios" ? "Energy-iOS" : "Energy-Android"
  sourcemap_output = platform == "ios" ? "./build/CodePush/main.jsbundle.map" : "./build/CodePush/index.android.bundle.map"
  bundle_path = platform == "ios" ? "./build/CodePush/main.jsbundle" : "./build/CodePush/index.android.bundle"

  appcenter_codepush_release_react(
    api_token: ENV['APP_CENTER_API_TOKEN'],
    owner_name: "mobile-artsy",
    app_name: app_name,
    description: "'#{description}'",
    deployment: deployment_name,
    sourcemap_output: sourcemap_output,
    output_dir: "./build",
    mandatory: false,
    no_duplicate_release_error: true,
    target_version: release_version,
  )

  # Sentry config
  sentry_cli_path="node_modules/@sentry/cli/bin/sentry-cli"
  project_slug = 'energy'
  org_slug = 'artsynet'

  upload_sentry_sourcemaps(
    sentry_cli_path: sentry_cli_path,
    org_slug: org_slug,
    project_slug: project_slug,
    sentry_release_name: release_name,
    dist: dist_version,
    bundle_path: bundle_path,
    sourcemap_path: sourcemap_output,
  )

  tag_and_push(tag: release_name)

  puts "Deploying to #{deployment_name} with description #{description} for platform #{platform}"
end

lane :promote_codepush do |options|
  token = ENV['APP_CENTER_API_TOKEN']

  rolloutPercentage = options[:rollout_percentage]
  androidAppName = "mobile-artsy/Energy-Android"
  iosAppName = "mobile-artsy/Energy-iOS"

  sh("appcenter login --token #{token}")

  sourceDeployment = "Canary"
  targetDeployment = "Production"

  # Promote to prod with rollout percentage, make it mandatory
  sh("appcenter codepush promote -a #{androidAppName} -s #{sourceDeployment} -d #{targetDeployment} -r #{rolloutPercentage} --mandatory")
  sh("appcenter codepush promote -a #{iosAppName} -s #{sourceDeployment} -d #{targetDeployment} -r #{rolloutPercentage} --mandatory")
end

lane :update_codepush_rollout do |options|
  token = ENV['APP_CENTER_API_TOKEN']
  sh("appcenter login --token #{token}")

  androidAppName = "mobile-artsy/Energy-Android"
  iosAppName = "mobile-artsy/Energy-iOS"
  targetDeployment = "Production"

  rolloutPercentage = options[:rollout_percentage]
  sh("appcenter codepush patch -a #{androidAppName} #{targetDeployment} -r #{rolloutPercentage}")
  sh("appcenter codepush patch -a #{iosAppName} #{targetDeployment} -r #{rolloutPercentage}")
end

def set_codepush_release_values(deployment_name, platform)
  date_str = DateTime.now.strftime("%Y.%m.%d.%H")
  latest_version = $APP_JSON['version']
  release_name = "codepush-#{deployment_name.downcase}-#{platform.downcase}-#{latest_version}-#{date_str}"
  $APP_JSON['codePushReleaseName'] = release_name
  $APP_JSON['codePushDist'] = date_str
  write_contents_to_file($APP_JSON_PATH, JSON.pretty_generate($APP_JSON))
  [release_name, date_str, latest_version]
end

error do |lane, exception|
  return unless BETA_LANES.include?(lane)

  if should_silence_beta_failure?
    puts("Ignoring beta failure, make sure to unset FASTLANE_SILENCE_BETA_FAILURES_UNTIL to receive alerts")
    return
  end

  if is_ci
    notify_beta_failed(exception: exception)
  else
    UI.error("Beta failed to deploy! #{exception.message}")
  end
end
