diff --git a/node_modules/@react-native-seoul/masonry-list/lib/index.d.ts b/node_modules/@react-native-seoul/masonry-list/lib/index.d.ts
index dc67ceb..a7a7d4b 100644
--- a/node_modules/@react-native-seoul/masonry-list/lib/index.d.ts
+++ b/node_modules/@react-native-seoul/masonry-list/lib/index.d.ts
@@ -11,7 +11,7 @@ interface Props<T> extends Omit<ScrollViewProps, 'refreshControl'> {
     onEndReached?: () => void;
     onEndReachedThreshold?: number;
     style?: StyleProp<ViewStyle>;
-    data: T[];
+    data: readonly T[];
     renderItem: ({ item, i }: {
         item: T;
         i: number;
@@ -24,9 +24,8 @@ interface Props<T> extends Omit<ScrollViewProps, 'refreshControl'> {
     contentContainerStyle?: StyleProp<ViewStyle>;
     containerStyle?: StyleProp<ViewStyle>;
     numColumns?: number;
-    keyExtractor?: ((item: T | any, index: number) => string) | undefined;
+    keyExtractor?: ((item: T, index: number) => string) | undefined;
     refreshControlProps?: Omit<RefreshControlProps, 'onRefresh' | 'refreshing'>;
 }
 declare function MasonryList<T>(props: Props<T>): ReactElement;
-declare const _default: React.MemoExoticComponent<typeof MasonryList>;
-export default _default;
+export { MasonryList };
diff --git a/node_modules/@react-native-seoul/masonry-list/lib/index.js b/node_modules/@react-native-seoul/masonry-list/lib/index.js
index 4284d32..705012c 100644
--- a/node_modules/@react-native-seoul/masonry-list/lib/index.js
+++ b/node_modules/@react-native-seoul/masonry-list/lib/index.js
@@ -16,7 +16,7 @@ const isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }, onEn
     return (Math.ceil(layoutMeasurement.height + contentOffset.y) >=
         contentSize.height - paddingToBottom);
 };
-function MasonryList(props) {
+export const MasonryList = memo((props) => {
     const [isRefreshing, setIsRefreshing] = useState(false);
     const { refreshing, data, innerRef, ListHeaderComponent, ListEmptyComponent, ListFooterComponent, ListHeaderComponentStyle, containerStyle, contentContainerStyle, renderItem, onEndReachedThreshold, onEndReached, onRefresh, loading, LoadingView, numColumns = 2, horizontal, onScroll, removeClippedSubviews = false, keyExtractor, keyboardShouldPersistTaps = 'handled', refreshControl = true, refreshControlProps, } = props;
     const { style } = props, propsWithoutStyle = __rest(props, ["style"]);
@@ -62,5 +62,4 @@ function MasonryList(props) {
         {ListFooterComponent}
       </>
     </ScrollView>);
-}
-export default memo(MasonryList);
+});
